# Ephemeral Infra Test
# temporarily deploy infra using terraform
# execute functional tests: sending requests to the API endpoints
# automatically destroy the infra after the tests

name: Ephemeral Infra Test

on:
  workflow_dispatch:

jobs:
  ephemeral:
    name: Deploy, Test, Destroy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Up Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Create backend.config file  # this file is used to configure the remote backend for terraform
        run: |
          cd infra
          echo "bucket = \"${{ secrets.AWS_TF_STATE_BUCKET_NAME }}\"" > backend.config 
          echo "key = \"${{ secrets.AWS_TF_STATE_S3_KEY }}\"" >> backend.config
          echo "region = \"${{ secrets.AWS_REGION }}\"" >> backend.config
        # these values need to be set in the repository secrets

      - name: Terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # these values need to be set in the repository secrets
        run: |
          cd infra
          terraform init -backend-config="./backend.config"

      - name: Terraform Apply
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          terraform apply -auto-approve

      - name: Wait for infra to be ready
        run: sleep 15

      - name: Create JWT token using Cognito to be able to test the API endpoints
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          cd infra
          USER_POOL_ID=$(terraform output -raw user_pool_id)
          CLIENT_ID=$(terraform output -raw cognito_client_id)
          USERNAME="testuser"
          PASSWORD="TestPassword123!"
          EMAIL="testuser@example.com"

          # 1. we need to create a new user in the Cognito User Pool
          aws cognito-idp sign-up \
            --region $AWS_REGION \
            --client-id $CLIENT_ID \
            --username $USERNAME \
            --password "$PASSWORD" \
            --user-attributes Name=email,Value="$EMAIL"

          # 2. For the test to work, we need to automatically confirm the user, but for real users, they would need to confirm their email
          aws cognito-idp admin-confirm-sign-up \
            --region $AWS_REGION \
            --user-pool-id $USER_POOL_ID \
            --username $USERNAME

          sleep 5

          # 3. Get the JWT token for the user
          JWT_TOKEN=$(curl --location --request POST 'https://cognito-idp.${AWS_REGION}.amazonaws.com/' \
            --header 'X-Amz-Target: AWSCognitoIdentityProviderService.InitiateAuth' \
            --header 'Content-Type: application/x-amz-json-1.1' \
            --data-raw '{
              "AuthParameters" : {
                  "USERNAME" : "'$USERNAME'",
                  "PASSWORD" : "'$PASSWORD'"
              },
              "AuthFlow" : "USER_PASSWORD_AUTH",
              "ClientId" : "'$CLIENT_ID'",
            }' | jq -r '.AuthenticationResult.IdToken')

          # 4. Export the JWT token as an environment variable
          echo "JWT_TOKEN=$JWT_TOKEN" >> $GITHUB_ENV

      - name: Test API endpoints
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          JWT_TOKEN: ${{ env.JWT_TOKEN }}
        run: |
          chmod +x ./tests/test_endpoints.sh
          ./tests/test_endpoints.sh $(cd infra && terraform output -raw api_base_url)
          # once tests are done, we can delete the user from the Cognito User Pool
          cd infra
          USER_POOL_ID=$(terraform output -raw user_pool_id)
          USERNAME="testuser"
          aws cognito-idp admin-delete-user \
            --region $AWS_REGION \
            --user-pool-id $USER_POOL_ID \
            --username $USERNAME || echo "User might not exist"
      
      - name: Terraform destroy
        if: always() # always run this step so that if a test fails, the infra is still destroyed
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd infra
          terraform destroy -auto-approve